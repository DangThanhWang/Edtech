// client/src/pages/AboutPage.jsx - Chuy·ªÉn t·ª´ AboutUsSection
import React, { useRef, useEffect, useState } from 'react';
import '../styles/pages/about.css';

const AboutPage = () => {
  return (
    <div className="about-page">
      <AboutHero />
      <MissionSection />
      <TeamSection />
      <StatsSection />
      <ValuesSection />
    </div>
  );
};

// Hero Section
const AboutHero = () => {
  return (
    <div className="about-hero">
      <div className="about-hero__background">
        <div className="about-hero__shapes">
          <div className="floating-shape floating-shape--1"></div>
          <div className="floating-shape floating-shape--2"></div>
          <div className="floating-shape floating-shape--3"></div>
        </div>
      </div>
      
      <div className="about-hero__container">
        <div className="about-hero__content">
          <div className="about-hero__badge">
            <span className="about-hero__badge-text">V·ªÅ StudyCards</span>
          </div>
          
          <h1 className="about-hero__title">
            C√°ch m·∫°ng h√≥a <br />
            <span className="about-hero__title-highlight">h·ªçc t·∫≠p hi·ªán ƒë·∫°i</span>
          </h1>
          
          <p className="about-hero__description">
            StudyCards ƒë∆∞·ª£c sinh ra v·ªõi s·ª© m·ªánh bi·∫øn vi·ªác h·ªçc t·∫≠p tr·ªü n√™n th√∫ v·ªã, 
            hi·ªáu qu·∫£ v√† d·ªÖ ti·∫øp c·∫≠n cho m·ªçi ng∆∞·ªùi. Ch√∫ng t√¥i tin r·∫±ng m·ªói ng∆∞·ªùi ƒë·ªÅu 
            c√≥ ti·ªÅm nƒÉng h·ªçc h·ªèi v√¥ h·∫°n.
          </p>
          
          <div className="about-hero__stats">
            <div className="about-hero__stat">
              <div className="about-hero__stat-number">1M+</div>
              <div className="about-hero__stat-label">H·ªçc vi√™n</div>
            </div>
            <div className="about-hero__stat">
              <div className="about-hero__stat-number">50K+</div>
              <div className="about-hero__stat-label">B·ªô th·∫ª</div>
            </div>
            <div className="about-hero__stat">
              <div className="about-hero__stat-number">15</div>
              <div className="about-hero__stat-label">Qu·ªëc gia</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Mission Section
const MissionSection = () => {
  return (
    <div className="about-mission">
      <div className="about-mission__container">
        <div className="about-mission__content">
          <div className="about-mission__text">
            <h2 className="about-mission__title">S·ª© m·ªánh c·ªßa ch√∫ng t√¥i</h2>
            <p className="about-mission__description">
              T·∫°o ra m·ªôt n·ªÅn t·∫£ng h·ªçc t·∫≠p th√¥ng minh, gi√∫p ng∆∞·ªùi h·ªçc ph√°t tri·ªÉn 
              ki·∫øn th·ª©c m·ªôt c√°ch t·ª± nhi√™n v√† b·ªÅn v·ªØng th√¥ng qua c√¥ng ngh·ªá hi·ªán ƒë·∫°i 
              v√† ph∆∞∆°ng ph√°p gi√°o d·ª•c ti√™n ti·∫øn.
            </p>
            
            <div className="about-mission__features">
              <div className="about-mission__feature">
                <div className="about-mission__feature-icon">üéØ</div>
                <div className="about-mission__feature-content">
                  <h3>H·ªçc t·∫≠p c√° nh√¢n h√≥a</h3>
                  <p>T√πy ch·ªânh tr·∫£i nghi·ªám h·ªçc t·∫≠p theo nhu c·∫ßu v√† kh·∫£ nƒÉng c·ªßa t·ª´ng ng∆∞·ªùi</p>
                </div>
              </div>
              
              <div className="about-mission__feature">
                <div className="about-mission__feature-icon">üß†</div>
                <div className="about-mission__feature-content">
                  <h3>Khoa h·ªçc nh·∫≠n th·ª©c</h3>
                  <p>√Åp d·ª•ng c√°c nghi√™n c·ª©u m·ªõi nh·∫•t v·ªÅ t√¢m l√Ω h·ªçc v√† khoa h·ªçc n√£o b·ªô</p>
                </div>
              </div>
              
              <div className="about-mission__feature">
                <div className="about-mission__feature-icon">üåê</div>
                <div className="about-mission__feature-content">
                  <h3>C·ªông ƒë·ªìng to√†n c·∫ßu</h3>
                  <p>K·∫øt n·ªëi ng∆∞·ªùi h·ªçc tr√™n to√†n th·∫ø gi·ªõi trong m·ªôt m√¥i tr∆∞·ªùng t√≠ch c·ª±c</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="about-mission__visual">
            <div className="about-mission__card">
              <div className="about-mission__card-header">
                <div className="about-mission__card-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
              <div className="about-mission__card-content">
                <div className="about-mission__progress">
                  <div className="about-mission__progress-item">
                    <span>T·ª´ v·ª±ng ti·∫øng Anh</span>
                    <div className="about-mission__progress-bar">
                      <div className="about-mission__progress-fill" style={{width: '85%'}}></div>
                    </div>
                  </div>
                  <div className="about-mission__progress-item">
                    <span>To√°n h·ªçc c∆° b·∫£n</span>
                    <div className="about-mission__progress-bar">
                      <div className="about-mission__progress-fill" style={{width: '92%'}}></div>
                    </div>
                  </div>
                  <div className="about-mission__progress-item">
                    <span>L·ªãch s·ª≠ Vi·ªát Nam</span>
                    <div className="about-mission__progress-bar">
                      <div className="about-mission__progress-fill" style={{width: '78%'}}></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Team Section
const TeamSection = () => {
  const teamMembers = [
    {
      name: "Nguy·ªÖn VƒÉn An",
      role: "CEO & Founder",
      description: "10+ nƒÉm kinh nghi·ªám trong EdTech v√† ƒë·ªïi m·ªõi gi√°o d·ª•c",
      avatar: "üßë‚Äçüíº",
      specialty: "Chi·∫øn l∆∞·ª£c & L√£nh ƒë·∫°o"
    },
    {
      name: "Tr·∫ßn Th·ªã B√¨nh",
      role: "CTO",
      description: "Chuy√™n gia c√¥ng ngh·ªá v·ªõi ni·ªÅm ƒëam m√™ AI v√† Machine Learning",
      avatar: "üë©‚Äçüíª",
      specialty: "AI & Technology"
    },
    {
      name: "L√™ VƒÉn C∆∞·ªùng",
      role: "Head of Design",
      description: "Nh√† thi·∫øt k·∫ø UX/UI v·ªõi t·∫ßm nh√¨n v·ªÅ tr·∫£i nghi·ªám ng∆∞·ªùi d√πng",
      avatar: "üé®",
      specialty: "UX/UI Design"
    },
    {
      name: "Ph·∫°m Th·ªã Dung",
      role: "Education Expert",
      description: "15+ nƒÉm nghi√™n c·ª©u ph∆∞∆°ng ph√°p gi√°o d·ª•c hi·ªán ƒë·∫°i",
      avatar: "üìö",
      specialty: "Pedagogical Research"
    }
  ];

  return (
    <div className="about-team">
      <div className="about-team__container">
        <div className="about-team__header">
          <h2 className="about-team__title">ƒê·ªôi ng≈© chuy√™n gia</h2>
          <p className="about-team__subtitle">
            Nh·ªØng con ng∆∞·ªùi t√†i nƒÉng ƒëang c√πng nhau x√¢y d·ª±ng t∆∞∆°ng lai gi√°o d·ª•c
          </p>
        </div>
        
        <div className="about-team__grid">
          {teamMembers.map((member, index) => (
            <TeamMemberCard key={index} member={member} index={index} />
          ))}
        </div>
      </div>
    </div>
  );
};

const TeamMemberCard = ({ member, index }) => {
  const [isVisible, setIsVisible] = useState(false);
  const cardRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setTimeout(() => setIsVisible(true), index * 100);
        }
      },
      { threshold: 0.1 }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => observer.disconnect();
  }, [index]);

  return (
    <div 
      ref={cardRef}
      className={`team-member-card ${isVisible ? 'team-member-card--visible' : ''}`}
    >
      <div className="team-member-card__avatar">
        <span className="team-member-card__emoji">{member.avatar}</span>
        <div className="team-member-card__status"></div>
      </div>
      
      <div className="team-member-card__content">
        <h3 className="team-member-card__name">{member.name}</h3>
        <div className="team-member-card__role">{member.role}</div>
        <p className="team-member-card__description">{member.description}</p>
        
        <div className="team-member-card__specialty">
          <span className="team-member-card__specialty-label">Chuy√™n m√¥n:</span>
          <span className="team-member-card__specialty-value">{member.specialty}</span>
        </div>
      </div>
      
      <div className="team-member-card__hover-effect"></div>
    </div>
  );
};

// Stats Section with Counter Animation
const StatsSection = () => {
  const [counters, setCounters] = useState({
    users: 0,
    studySets: 0,
    countries: 0,
    accuracy: 0
  });
  
  const [isVisible, setIsVisible] = useState(false);
  const sectionRef = useRef(null);

  const targetValues = {
    users: 1000000,
    studySets: 50000,
    countries: 15,
    accuracy: 94
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting && !isVisible) {
          setIsVisible(true);
          animateCounters();
        }
      },
      { threshold: 0.3 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, [isVisible]);

  const animateCounters = () => {
    const duration = 2000;
    const steps = 60;
    const stepDuration = duration / steps;

    let step = 0;
    const interval = setInterval(() => {
      step++;
      const progress = step / steps;
      const easeOut = 1 - Math.pow(1 - progress, 3);

      setCounters({
        users: Math.floor(targetValues.users * easeOut),
        studySets: Math.floor(targetValues.studySets * easeOut),
        countries: Math.floor(targetValues.countries * easeOut),
        accuracy: Math.floor(targetValues.accuracy * easeOut)
      });

      if (step >= steps) {
        clearInterval(interval);
        setCounters(targetValues);
      }
    }, stepDuration);
  };

  const formatNumber = (num) => {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(0) + 'K';
    return num.toString();
  };

  return (
    <div ref={sectionRef} className="about-stats">
      <div className="about-stats__container">
        <div className="about-stats__grid">
          <div className="about-stats__item">
            <div className="about-stats__icon">üë•</div>
            <div className="about-stats__number">{formatNumber(counters.users)}+</div>
            <div className="about-stats__label">H·ªçc vi√™n tin t∆∞·ªüng</div>
          </div>
          
          <div className="about-stats__item">
            <div className="about-stats__icon">üìö</div>
            <div className="about-stats__number">{formatNumber(counters.studySets)}+</div>
            <div className="about-stats__label">B·ªô th·∫ª ƒë∆∞·ª£c t·∫°o</div>
          </div>
          
          <div className="about-stats__item">
            <div className="about-stats__icon">üåç</div>
            <div className="about-stats__number">{counters.countries}</div>
            <div className="about-stats__label">Qu·ªëc gia</div>
          </div>
          
          <div className="about-stats__item">
            <div className="about-stats__icon">‚≠ê</div>
            <div className="about-stats__number">{counters.accuracy}%</div>
            <div className="about-stats__label">ƒê·ªô h√†i l√≤ng</div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Values Section
const ValuesSection = () => {
  const values = [
    {
      icon: "üí°",
      title: "ƒê·ªïi m·ªõi s√°ng t·∫°o",
      description: "Lu√¥n t√¨m ki·∫øm nh·ªØng c√°ch th·ª©c m·ªõi ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám h·ªçc t·∫≠p"
    },
    {
      icon: "ü§ù",
      title: "C·ªông t√°c",
      description: "X√¢y d·ª±ng c·ªông ƒë·ªìng h·ªçc t·∫≠p n∆°i m·ªçi ng∆∞·ªùi c√πng nhau ph√°t tri·ªÉn"
    },
    {
      icon: "üéØ",
      title: "Ch·∫•t l∆∞·ª£ng",
      description: "Cam k·∫øt mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m v√† d·ªãch v·ª• t·ªët nh·∫•t"
    },
    {
      icon: "üå±",
      title: "Ph√°t tri·ªÉn b·ªÅn v·ªØng",
      description: "T·∫°o ra gi√° tr·ªã l√¢u d√†i cho c·ªông ƒë·ªìng v√† x√£ h·ªôi"
    }
  ];

  return (
    <div className="about-values">
      <div className="about-values__container">
        <div className="about-values__header">
          <h2 className="about-values__title">Gi√° tr·ªã c·ªët l√µi</h2>
          <p className="about-values__subtitle">
            Nh·ªØng nguy√™n t·∫Øc ƒë·ªãnh h∆∞·ªõng m·ªçi ho·∫°t ƒë·ªông c·ªßa ch√∫ng t√¥i
          </p>
        </div>
        
        <div className="about-values__grid">
          {values.map((value, index) => (
            <ValueCard key={index} value={value} index={index} />
          ))}
        </div>
      </div>
    </div>
  );
};

const ValueCard = ({ value, index }) => {
  const [isVisible, setIsVisible] = useState(false);
  const cardRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setTimeout(() => setIsVisible(true), index * 150);
        }
      },
      { threshold: 0.1 }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => observer.disconnect();
  }, [index]);

  return (
    <div 
      ref={cardRef}
      className={`value-card ${isVisible ? 'value-card--visible' : ''}`}
    >
      <div className="value-card__icon">{value.icon}</div>
      <h3 className="value-card__title">{value.title}</h3>
      <p className="value-card__description">{value.description}</p>
    </div>
  );
};

export default AboutPage;